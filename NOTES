general
=======
- 'object' and 'type' are probably keywords that shouldn't be reused, btw
- proper exception handling needed all round (and maybe some more error checks?)
- could a Processor dynamically alter priority?  of itself, or another class?  if so, would it ever want to?  "learning"?
- the patch on ConfigObj only does one level of list interpolation.  Does ConfigObj support multi-level nested lists?

auth
====
- is auth_ called auth_ because ibid.auth was already taken?  not cool

plugins
=======
- load *all* class variables from a sub-section of the plugin conf, allowing authors to override anything that we haven't thought of yet (i.e. no special cases)
- process() is still a bit biased towards type=message?
- how about having a lambda decorator like @match(pattern) to allow other types of matching?
- reload config is a good example of somewhere that error reporting should occur
  -- how about an "admin" source?  that mails exceptions or logs them to syslog or something?
    -- not a source.  Sounds like proper logging needs to be set up, actually.  Future Jonathan:  add python.logging like you said you would.
- load/reload is a good example of the reloader not being generic enough... I think?
- is ignore strong enough?  it just sets processed to true - postprocessors won't ignore this.  is that bad?
- applause to Michael for the Responses processor: that's clever
  -- that said, not at all convinced by Address processor
    -- it takes a basestring only, not a dict as well
    -- do we even want what it does?  cf. the Announce plugin - I think Processors should decide for themselves whether they want to address their replies or not.  (But what about private replies - adding an address in to that is crap)
- we get usage on a processor name (which could be 'Rupert') - is that right? is this because names == 'features'?
  -- docstring/help/usage could do with an investigation and proper discussion a-la this afternoon's discussion of the plugin architecture
  -- the help regex is faulty, I believe (.+ will grab a space if there's nothing else for it to grab?)
- identity plugin:  'identify' is different in different scopes and it's a little confusing - not cool to a first-time reader
- twisted helper functions (with that whole blocking-wrapper thing) may as well be written
- log module is interesting (if a bit screwed by the Addressed module)
  -- we want IRC-log style logs (for use in log analysers, etc), but how do you handle this with multiple sources?
  -- some sort of configurable thing?  see irssi's logfile-name settings:  simple variable interpolation leads to quite flexible logging
- sighting processor should keep track of the number of times the dude has been sighted
  -- ooh, also the first time the dude was seen?  is that excessive?
- sources processor:  needs a bit of error checking, authentication and...  all sorts.
  -- (no, I know, it was there for debugging, just a note for Future Us)

factoids
========
- these don't exist yet, but anyway
- Knab has variable substitutions - $day, $hour, etc.  Would make the DateTime plugin unnecessary, for a start

