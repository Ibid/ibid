#!/usr/bin/env python

from sys import argv, exit, stderr, stdout

from sqlalchemy import create_engine, Column, Integer, String, DateTime, or_, ForeignKey, Boolean, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import func

from ibid.config import FileConfig
from ibid.models import Identity, Sighting
from ibid.plugins.factoid import Factoid, FactoidName, FactoidValue
from ibid.plugins.karma import Karma

Base = declarative_base()

class KnabFactoid(Base):
    __tablename__ = 'factoid'

    fact = Column(String(250), primary_key=True)
    value = Column(Text, primary_key=True)
    verb = Column(String(20), primary_key=True)
    who = Column(String(30))
    flags = Column(Integer)
    time = Column(DateTime)

    def __repr__(self):
        return u'<KnabFactoid %s %s %s>' % (self.fact, self.verb, self.value)

class KnabSighting(Base):
    __tablename__ = 'seen'

    nick = Column(String(30), primary_key=True)
    time = Column(DateTime)
    channel = Column(String(30))
    message = Column(Text)

    def __repr__(self):
        return u'<KnabSighting %s>' % self.nick

class KnabKarma(Base):
    __tablename__ = 'karma'

    person = Column(String(100), primary_key=True)
    karma = Column(Integer)
    time = Column(DateTime)

    def __repr__(self):
        return u'<KnabKarma %s %s>' % (self.person, self.karma)

def identify(session, user, source, created, create=True):
    if not user:
        return None
    user = decode(user)
    
    identity = session.query(Identity).filter(func.lower(Identity.identity)==user.lower()).filter(func.lower(Identity.source)==source.lower()).first()
    if not identity:
        identity = Identity(source, user)
        identity.created = created
        session.save(identity)
        session.flush()

    return identity.id

def decode(string):
    if string is None:
        return None

    string = string.replace('\x00', '')
    try:
        decoded = unicode(string, 'utf-8')
    except UnicodeDecodeError, e:
        decoded = unicode(string, 'iso-8859-15', errors='replace')
        print >> stderr, 'Decoded to %s\n' % decoded

    return decoded

def import_factoids(knab, ibid, source):
    ibid.begin()

    print
    print u"Importing factoids"
    position = 0
    total = knab.query(KnabFactoid).count()
    for index, kfactoid in enumerate(knab.query(KnabFactoid).order_by(KnabFactoid.time.asc()).all()):

        if not kfactoid:
            continue

        kfactoid.fact = decode(kfactoid.fact)
        kfactoid.verb = decode(kfactoid.verb)
        kfactoid.value = decode(kfactoid.value)

        if index % 100 == 0:
            stdout.write('\r%s/%s' % (index, total))
            stdout.flush()

        fname = ibid.query(FactoidName).filter(func.lower(FactoidName.name)==unicode(kfactoid.fact.lower())).first()
        if not fname:
            factoid = Factoid()
            fname = FactoidName(kfactoid.fact, identify(ibid, kfactoid.who, source, kfactoid.time))
            fname.time = factoid.time = kfactoid.time
            factoid.names.append(fname)
        else:
            factoid = fname.factoid

        if kfactoid.value.strip().lower().startswith('<reply>') or kfactoid.value.strip().lower().startswith('<action>'):
            value = kfactoid.value
        else:
            value = u'%s %s' % (kfactoid.verb, kfactoid.value)

        fvalue = FactoidValue(value, identify(ibid, kfactoid.who, source, kfactoid.time))
        fvalue.time = kfactoid.time

        factoid.values.append(fvalue)
        ibid.save_or_update(factoid)

    ibid.commit()

def import_sightings(knab, ibid, source):
    ibid.begin()

    print
    print u"Importing sightings"
    position = 0
    total = knab.query(KnabSighting).count()
    for index, ksighting in enumerate(knab.query(KnabSighting).order_by(KnabSighting.time.asc()).all()):

        if not ksighting:
            continue

        ksighting.channel = decode(ksighting.channel)
        ksighting.message = decode(ksighting.message)

        if index % 100 == 0:
            stdout.write('\r%s/%s' % (index, total))
            stdout.flush()

        sighting = Sighting(identify(ibid, ksighting.nick, source, ksighting.time), u'message', ksighting.channel, ksighting.message)
        sighting.time = ksighting.time

        ibid.save(sighting)
        ibid.flush()

    ibid.commit()

def import_karma(knab, ibid, source):
    ibid.begin()

    print
    print u"Importing karma"
    position = 0
    total = knab.query(KnabKarma).count()
    for index, kkarma in enumerate(knab.query(KnabKarma).order_by(KnabKarma.time.asc()).all()):

        kkarma.person = decode(kkarma.person)

        if index % 100 == 0:
            stdout.write('\r%s/%s' % (index, total))
            stdout.flush()

        karma = Karma(kkarma.person)
        karma.value = kkarma.karma
        karma.changes = abs(karma.value)
        karma.time = kkarma.time

        ibid.save(karma)

    ibid.commit()

if __name__ == '__main__':
    if len(argv) < 3:
        print 'Usage: ibid-import <knab database> <source> [<ibid config>]'
        exit(1)

    knabengine = create_engine(argv[1])
    KnabSession = sessionmaker(bind=knabengine)
    knab = KnabSession()

    source = unicode(argv[2])

    config = len(argv) > 3 and argv[3] or 'ibid.ini'
    config = FileConfig(config)

    ibidengine = create_engine(config.databases['ibid']['uri'], encoding='utf-8')
    IbidSession = sessionmaker(bind=ibidengine, transactional=False)
    ibid = IbidSession()

    import_factoids(knab, ibid, source)
    import_sightings(knab, ibid, source)
    import_karma(knab, ibid, source)

    print
    print 'Done'

    knab.close()

# vi: set et sta sw=4 ts=4:
