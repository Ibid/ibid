#!/usr/bin/env python

import logging
from optparse import OptionParser
from os import getenv
from sys import exit
from os.path import exists

try:
    import readline
    if exists('.history'):
        readline.read_history_file('.history')
except ImportError:
    pass

from twisted.python.modules import getModule
from sqlalchemy.exceptions import IntegrityError

import ibid
import ibid.plugins
from ibid.config import FileConfig
from ibid.event import Event
from ibid.models import Identity

parser = OptionParser(usage="""%prog [options...] [plugins...]
plugins is the list of plugins to load. A plugin name followed by a - will be disabled rather than loaded.""")
parser.add_option("-o", "--only", dest="load_base", action="store_false", default=True,
        help="Only load the specified plugins, not the common base plugins")
parser.add_option("-c", "--configured", dest="load_configured", action="store_true",
        help="Load all all configured plugins")

(options, args) = parser.parse_args()

if options.load_configured and not options.load_base:
    parser.error("Incompatible combination: --configured and --only")

# Setup Ibid core:

def auth_responses(event, permission):
    return True

ibid.plugins.auth_responses = auth_responses
ibid.options = {'base': '.'}

logging.basicConfig(level=logging.DEBUG)
ibid.config = FileConfig("ibid.ini")
ibid.config.merge(FileConfig("local.ini"))
ibid.reload_reloader()
ibid.reloader.reload_databases()
ibid.reloader.reload_dispatcher()

class TestSource(dict):
    type = 'test'
    permissions = []
    supports = []
    logging_name = lambda self, name: name

ibid.sources[u'test_source'] = TestSource()

load = [plugin for plugin in args if not plugin.endswith("-")]
noload = [plugin[:-1] for plugin in args if plugin.endswith("-")]

if options.load_base:
    load.extend(("admin", "config", "core", "help", "test"))

if load:
    if 'load' in ibid.config.plugins:
        load.extend(ibid.config.plugins['load'])
    ibid.config.plugins['load'] = load

if noload:
    if 'noload' in ibid.config.plugins:
        ibid.config.plugins['noload'].extend(noload)
    else:
        ibid.config.plugins['noload'] = noload

if not options.load_configured:
    ibid.config.plugins['autoload'] = False

ibid.reloader.load_processors()

username = unicode(getenv('USER'))
if not username:
    username = u'tester'

session = ibid.databases.ibid()

identity = session.query(Identity).filter_by(identity=username, source=u'test_source').first()
if not identity:
    identity = Identity(u'test_source',username)
    session.save(identity)
    session.commit()
    identity = session.query(Identity).filter_by(identity=username).first()
identity_id = identity.id

session.close()

try:
    encoding = getenv("LANG").split(".")[1]
except:
    encoding = "ascii"

log = logging.getLogger('scripts.ibid-plugin')

while True:
    event = Event(u'test_source', u'message')
    event.sender['id'] = event.sender['connection'] = event.sender['nick'] = username
    event.identity = identity_id
    event.account =  None
    event.addressed = True
    event.public = False
    event.channel = u"testchan"

    try:
        message = unicode(raw_input('Query: '), encoding)
        event.message = {'raw': message, 'clean': message, 'stripped': message, 'deaddressed': message}
    except (KeyboardInterrupt, EOFError):
        break

    for processor in ibid.processors:
        try:
            processor.process(event)
        except Exception:
            log.exception(u"Exception occured in %s processor of %s plugin",
                    processor.__class__.__name__, processor.name)
            event.complain = 'exception'
            if 'session' in event:
                event.session.rollback()
                event.session.close()
                del event['session']

        if 'session' in event:
            try:
                event.session.commit()
            except IntegrityError:
                self.log.exception(u"Exception occured committing session from the %s processor of %s plugin",
                        processor.__class__.__name__, processor.name)
                event.complain = u'exception'
                event.session.rollback()
                event.session.close()
                del event['session']

    for response in event.responses:
        if isinstance(response, dict):
            response = response['reply']
        print 'Response: %s' % response

    event.session.close()

if readline:
    readline.write_history_file('.history')
print "\nExiting"

# vi: set et sta sw=4 ts=4:
