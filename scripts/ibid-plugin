#!/usr/bin/env python

import logging
import os
import sqlalchemy
from sys import argv, exit

try:
    import readline
except ImportError:
    pass

if len(argv) < 2:
    print 'Usage: %s plugin[s]' % (argv[0], )
    exit(1)

import ibid
import ibid.plugins
from ibid.config import FileConfig
from ibid.event import Event
from ibid.models import Identity

def auth_responses(event, permission):
    return True

ibid.plugins.auth_responses = auth_responses
ibid.options = {'base': '.'}

logging.basicConfig(level=logging.DEBUG)
ibid.config = FileConfig("ibid.ini")
ibid.config.merge(FileConfig("local.ini"))
ibid.reload_reloader()
ibid.reloader.reload_databases()
ibid.reloader.reload_dispatcher()

plugins = argv[1:]
if len(argv[1:]) == 1 and argv[1] == "--all":
    plugins = ibid.config.get("load")
for plugin in plugins:
    ibid.reloader.load_processor(plugin)

username = unicode(os.getenv('USER'))
if not username:
    username = u'tester'
session = ibid.databases.ibid()
identity = session.query(Identity).filter_by(identity=username).first()
if not identity:
    identity = Identity(u'test_source',username)
    session.save(identity)
    session.flush()
    identity = session.query(Identity).filter_by(identity=username).first()
identity_id = identity.id

try:
    encoding = os.getenv("LANG").split(".")[1]
except:
    encoding = "ascii"

log = logging.getLogger('scripts.ibid-plugin')

while True:
    event = Event(u'test_source', u'message')
    event.sender['id'] = event.sender['connection'] = event.sender['nick'] = username
    event.identity = identity_id
    event.account =  None
    event.addressed = True
    event.public = False
    event.channel = u"testchan"

    try:
        event.message = unicode(raw_input('Query: '), encoding)
    except (KeyboardInterrupt, EOFError):
        break

    for processor in ibid.processors:
        try:
            processor.process(event)
        except Exception:
            log.exception(u"Exception occured in %s processor of %s plugin", processor.__class__.__name__, processor.name)
            event.complain = 'exception'

    for response in event.responses:
        if isinstance(response, dict):
            response = response['reply']
        print 'Response: %s' % response

print "\nExiting"

# vi: set et sta sw=4 ts=4:
