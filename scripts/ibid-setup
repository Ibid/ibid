#!/usr/bin/env python

import sys
from sys import exit, stdin
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from getpass import getpass
from os.path import exists
from shutil import copyfileobj

from pkg_resources import resource_stream

import ibid.plugins
from ibid.plugins.auth import hash
from ibid.config import FileConfig
from ibid.models import Account, Identity, Permission, Credential

if exists('ibid.ini'):
    config = FileConfig('ibid.ini')

else:
    sample_config = resource_stream('ibid', 'config.ini')
    config = FileConfig(sample_config)

    botname = raw_input(u'What would you like to call your bot? ')
    print u'Please enter the full URL of the database to use, or just press Enter for an SQLite database.'
    database = raw_input(u'Database URL: ')

    config['botname'] = botname
    config.databases['ibid']['uri'] = database or 'sqlite:///ibid.db'

    config.write(open('ibid.ini', 'w'))
    if not exists('logging.ini'):
        copyfileobj(resource_stream('ibid', 'logging.ini'), open('logging.ini', 'w'))

bases = [('ibid.models', 'Base'), ('ibid.plugins.factoid', 'Base'), ('ibid.plugins.url', 'Base'), ('ibid.plugins.karma', 'Base'), ('ibid.plugins.feeds', 'Base')]
metadatas = []
engine = create_engine(config.databases['ibid']['uri'])

for module, model in bases:
    try:
        __import__(module)
        klass = eval('%s.%s' % (module, model))
        klass.metadata.create_all(engine)
    except ImportError, e:
        print "Couldn't create tables for plugin %s because it requires the %s module" % (module, e.args[0].replace('No module named ', ''))

for module, metadata in metadatas:
    __import__(module)
    klass = eval('%s.%s' % (module, metadata))
    klass.create_all(engine)

print u'Database tables created'

print u'Please enter the details for you account. This account will be given full admin permissions.'
identity = unicode(raw_input('Nick/JID: '))
source = unicode(raw_input('Source name: '))
pass1 = getpass('Password: ')
pass2 = getpass('Confirm password: ')

if pass1 != pass2:
    print 'Password do not match'
    exit(1)

Session = sessionmaker(bind=engine)
session = Session()
account = Account(identity)
identity = Identity(source, identity)
account.identities.append(identity)

for permission in (u'accounts', u'sources', u'plugins', u'core', u'admin', u'config', u'saydo'):
    perm = Permission(permission, u'auth')
    account.permissions.append(perm)

credential = Credential(u'password', hash(unicode(pass1)))
account.credentials.append(credential)

session.save_or_update(account)
session.save_or_update(identity)
session.commit()
session.close()

print 'Account created with admin permissions'

# vi: set et sta sw=4 ts=4:
