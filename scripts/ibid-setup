#!/usr/bin/env python

import logging
import sys
from sys import exit, stderr
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from getpass import getpass
from os.path import exists
from shutil import copyfileobj

from pkg_resources import resource_stream
from twisted.python.modules import getModule

import ibid
from ibid.plugins.auth import hash
from ibid.config import FileConfig
from ibid.core import DatabaseManager 
from ibid.models import Account, Identity, Permission, Credential, metadata, upgrade_schemas

logging.basicConfig(level=logging.DEBUG)

for module in getModule('ibid.plugins').iterModules():
    try:
        __import__(module.name)
    except Exception, e:
        print >> stderr, u"Couldn't load %s plugin: %s" % (module.name.replace('ibid.plugins.', ''), unicode(e))

ibid.options = {'base': '.'}
if exists('ibid.ini'):
    ibid.config = FileConfig('ibid.ini')
    ibid.config.merge(FileConfig('local.ini'))
    sname = None

else:
    sample_config = resource_stream('ibid', 'config.ini')
    ibid.config = FileConfig(sample_config)

    botname = raw_input(u'What would you like to call your bot? ')
    ibid.config['botname'] = botname

    print u'Please enter the full URL of the database to use, or just press Enter for an SQLite database.'
    ibid.config.databases['ibid'] = raw_input(u'Database URL: ') or 'sqlite:///ibid.db'

    print u"Please enter the details for the primary source. Press Enter for the default option."
    source = {'nick': '$botname'}
    sname = raw_input(u'Source name (e.g. freenode, atrum, jabber): ')
    source['server'] = raw_input(u'Server: ')
    port = raw_input(u'Port: ')
    if port:
        source['port'] = port
    source['type'] = raw_input(u'Source type (irc or jabber): ')

    if source['type'].lower() == 'irc':
        source['channels'] = [c.strip() for c in raw_input(u'Default channels to join (comma separated): ').split(',')]
        source['auth'] = ['hostmask', 'nickserv']
    elif source['type'].lower() == 'jabber':
        source['jid'] = raw_input(u'JID: ')
        source['rooms'] = [r.strip() for r in raw_input(u'Default rooms to join (comma separated): ').split(',')]
        source['auth'] = ['implicit']
        source['ssl'] = raw_input(u'SSL (Y/N): ').lower() in ('y', 'yes', 'true')
    else:
        print 'Invalid source type'
        exit(1)

    ibid.config.sources[sname] = source

    ibid.config.write(open('ibid.ini', 'w'))
    if not exists('logging.ini'):
        copyfileobj(resource_stream('ibid', 'logging.ini'), open('logging.ini', 'w'))

db = DatabaseManager(check_schema_versions=False)
Session = db['ibid']
upgrade_schemas(Session)

print u'Database tables created'

print u'Please enter the details for you account. This account will be given full admin permissions.'
identity = unicode(raw_input('Nick/JID: '))
source = sname or unicode(raw_input('Source name: '))
pass1 = getpass('Password: ')
pass2 = getpass('Confirm password: ')

if pass1 != pass2:
    print 'Password do not match'
    exit(1)

session = Session()
account = Account(identity)
identity = Identity(source, identity)
account.identities.append(identity)

for permission in (u'accounts', u'sources', u'plugins', u'core', u'admin',
    u'config', u'saydo', u'factoidadmin', u'karmaadmin', u'eval'):
    perm = Permission(permission, u'auth')
    account.permissions.append(perm)

credential = Credential(u'password', hash(unicode(pass1)))
account.credentials.append(credential)

session.save_or_update(account)
session.save_or_update(identity)
session.commit()
session.close()

print 'Account created with admin permissions'

# vi: set et sta sw=4 ts=4:
